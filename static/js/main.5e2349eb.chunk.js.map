{"version":3,"sources":["containers/navbar/NavBar.js","components/blogs/Blogs.js","components/contact/Contact.js","components/error/Error.js","components/experience/Experience.js","components/home/Home.js","components/interests/Interests.js","components/tech-stack/TechStack.js","containers/routes/Routes.js","containers/footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","toggleButton","navbarLinks","useEffect","document","getElementsByClassName","addEventListener","event","preventDefault","classList","toggle","toggleNavbar","className","classNames","href","src","process","alt","to","onClick","Blogs","Contact","Error","Experience","Home","Interests","TechStack","Routes","path","component","exact","MyFooter","App","Fragment","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oXAqDeA,G,MA/CA,SAACC,GAEd,IAAIC,EACAC,EAEJC,qBAAU,WACRF,EAAeG,SAASC,uBAAuB,iBAAiB,GAChEH,EAAcE,SAASC,uBAAuB,gBAAgB,GAC9DJ,EAAaK,iBAAiB,SAAS,SAACC,GACtCA,EAAMC,iBACNN,EAAYO,UAAUC,OAAO,eAE9B,IAEH,IAAMC,EAAe,SAACJ,GACpBL,EAAYO,UAAUC,OAAO,WAG/B,OACE,yBAAKE,UAAWC,IAAW,SAAU,eACnC,yBAAKD,UAAU,eACf,uBAAGE,KAAK,YACN,yBAAKF,UAAU,OACXG,IAAKC,uBACLC,IAAI,uDAIV,uBAAGH,KAAK,IAAIF,UAAU,iBACpB,0BAAMA,UAAU,QAChB,0BAAMA,UAAU,QAChB,0BAAMA,UAAU,SAElB,yBAAKA,UAAU,gBACb,4BACE,4BAAI,kBAAC,IAAD,CAAMM,GAAG,WAAWC,QAASR,GAA7B,SACJ,4BAAI,kBAAC,IAAD,CAAMO,GAAG,sBAAsBC,QAASR,GAAxC,SACJ,4BAAI,kBAAC,IAAD,CAAMO,GAAG,sBAAsBC,QAASR,GAAxC,eACJ,4BAAI,kBAAC,IAAD,CAAMO,GAAG,iBAAiBC,QAASR,GAAnC,UACJ,4BAAI,kBAAC,IAAD,CAAMO,GAAG,qBAAqBC,QAASR,GAAvC,cACJ,4BAAI,kBAAC,IAAD,CAAMO,GAAG,mBAAmBC,QAASR,GAArC,iB,OCpCCS,MARf,WACE,OACE,uCCMWC,MARf,WACE,OACE,yCCMWC,MARf,WACE,OACE,6BACE,uDCKSC,MARf,WACE,OACE,4C,MCYWC,MAZf,WACE,OACE,yBAAKZ,UAAU,WACb,6BACE,yBAAKA,UAAU,gBACbG,IAAKC,0BAET,yECDSS,MARf,WACE,OACE,2CCMWC,MARf,WACE,OACE,4CCeWC,EAdA,WACb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,YAAYC,UAAWL,EAAMM,OAAK,IAC9C,kBAAC,IAAD,CAAOF,KAAK,sBAAsBC,UAAWH,IAC7C,kBAAC,IAAD,CAAOE,KAAK,sBAAsBC,UAAWN,IAC7C,kBAAC,IAAD,CAAOK,KAAK,iBAAiBC,UAAWT,IACxC,kBAAC,IAAD,CAAOQ,KAAK,qBAAqBC,UAAWJ,IAC5C,kBAAC,IAAD,CAAOG,KAAK,mBAAmBC,UAAWR,IAC1C,kBAAC,IAAD,CAAOQ,UAAWP,M,MCFTS,MARf,WACE,OACE,yBAAKnB,UAAU,UACb,uBAAGA,UAAU,aAAb,2D,MCUSoB,MAVf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJtC,SAASuC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5e2349eb.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport classNames from 'classnames';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './styles.css';\r\n\r\nconst NavBar = (props) => {\r\n\r\n  let toggleButton;\r\n  let navbarLinks;\r\n\r\n  useEffect(() => {\r\n    toggleButton = document.getElementsByClassName('toggle-button')[0];\r\n    navbarLinks = document.getElementsByClassName('navbar-links')[0];\r\n    toggleButton.addEventListener('click', (event) => {\r\n      event.preventDefault();\r\n      navbarLinks.classList.toggle('active');\r\n    });\r\n  }, []);\r\n\r\n  const toggleNavbar = (event) => {\r\n    navbarLinks.classList.toggle('active');\r\n  };\r\n\r\n  return (\r\n    <nav className={classNames(\"navbar\", \"is-primary\")}>\r\n      <div className=\"brand-title\">\r\n      <a href=\"/profile\">\r\n        <img className=\"logo\"\r\n            src={process.env.PUBLIC_URL + \"/sp-logo.png\"}\r\n            alt=\"Satyajit Patnaik | Frontend JavaScript Developer\"/>\r\n      </a>\r\n        \r\n      </div>\r\n      <a href=\"#\" className=\"toggle-button\">\r\n        <span className=\"bar\"></span>\r\n        <span className=\"bar\"></span>\r\n        <span className=\"bar\"></span>\r\n      </a>\r\n      <div className=\"navbar-links\">\r\n        <ul>\r\n          <li><Link to=\"/profile\" onClick={toggleNavbar}>Home</Link></li>\r\n          <li><Link to=\"/profile/tech-stack\" onClick={toggleNavbar}>Tech</Link></li>\r\n          <li><Link to=\"/profile/experience\" onClick={toggleNavbar}>Experience</Link></li>\r\n          <li><Link to=\"/profile/blogs\" onClick={toggleNavbar}>Blogs</Link></li>\r\n          <li><Link to=\"/profile/interests\" onClick={toggleNavbar}>Interests</Link></li>\r\n          <li><Link to=\"/profile/contact\" onClick={toggleNavbar}>Contact</Link></li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from 'react'\r\n\r\nfunction Blogs() {\r\n  return (\r\n    <div>\r\n      Blogs\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Blogs\r\n","import React from 'react'\r\n\r\nfunction Contact() {\r\n  return (\r\n    <div>\r\n      Contact\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Contact\r\n","import React from 'react'\r\n\r\nfunction Error() {\r\n  return (\r\n    <div>\r\n      <h1>Oops! Page not found!</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Error\r\n","import React from 'react'\r\n\r\nfunction Experience() {\r\n  return (\r\n    <div>\r\n      Experience\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Experience;\r\n","import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"profile\">\r\n      <div>\r\n        <img className=\"profile-image\" \r\n          src={process.env.PUBLIC_URL + \"/profile.jpg\"} />\r\n      </div>\r\n      <div>summary with github and linkedin links</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\n\r\nfunction Interests() {\r\n  return (\r\n    <div>\r\n      Interests\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Interests\r\n","import React from 'react'\r\n\r\nfunction TechStack() {\r\n  return (\r\n    <div>\r\n      Tech Stack\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TechStack\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\n\r\nimport { Blogs, Contact, Error, Experience, Home, Interests, TechStack } from './../../components/';\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path='/profile/' component={Home} exact/>\r\n      <Route path='/profile/tech-stack' component={TechStack}/>\r\n      <Route path='/profile/experience' component={Experience}/>\r\n      <Route path='/profile/blogs' component={Blogs}/>\r\n      <Route path='/profile/interests' component={Interests}/>\r\n      <Route path='/profile/contact' component={Contact}/>\r\n      <Route component={Error} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nfunction MyFooter() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <p className=\"copyright\">&#169; Satyajit Patnaik | Frontend JavaScript Developer</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MyFooter;\r\n","import React from 'react';\nimport NavBar from './containers/navbar/NavBar';\nimport Routes from './containers/routes/Routes';\nimport Footer from './containers/footer/Footer';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <NavBar />\n      <Routes />\n      <Footer />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}